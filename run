#!/bin/bash


function help() {
cat << EOF
Task runner

Usage:
    run [COMMAND] [ARGS...]

Commands:
    start               Setup a production environment
    start_dev           Setup a development environment
    translate           Generate and compile translations

If an unknown command is specified, it will be passed to docker-compose. e.g:
    run up -d
    run logs
    run exec django bash

EOF
}

DOCKER_IMAGE="radioco-web:latest"


function start_dev(){
    # Step 1. Extract the css file

    # Build the sass container
    docker build --target sass-builder -t sass-builder:latest .
    # Run a container to extract the files
    docker create --name sass-container sass-builder:latest
    docker cp sass-container:/app/css/main.css ./backend/radioco/main/static/main/css/main.css
    docker rm sass-container

    cd backend
    # Step 2. Install poetry dependencies
    poetry install

    # Step 3. Start the development server
    rm -rf static
    poetry run python manage.py collectstatic --no-input
    poetry run python manage.py compress
    poetry run python manage.py collectstatic --no-input

    # Step 4. Start the development server
    echo "Starting the development server"
    python manage.py runserver --nostatic
}


function start(){
     docker build -t $DOCKER_IMAGE .
     docker run --rm -p 8000:8000 $DOCKER_IMAGE
}

function shell(){
     docker-compose run --rm django /bin/bash
}


function manage(){
    docker run --rm --no-deps django python3 manage.py "$@"
}

function translate(){
    docker 
    manage render_translation_vars
    docker run --rm django python3 manage.py makemessages -l en --no-wrap
    docker-compose run --rm django python3 manage.py makemessages --all --no-wrap
    docker-compose run --rm django python3 manage.py compilemessages
}


function export_file_vars() {
    # Exports values from .env files, but without clobbering existing variables
    filename=$1
    while read -r line; do
         if [[ $line =~ ^([^=#]+)=(.*)$ ]]; then
            key=${BASH_REMATCH[1]}
            value=${BASH_REMATCH[2]}
            existing_value=${!key}
            if [ -z $existing_value ]; then
                export $key="$value"
            fi
         fi
    done < $filename
}

export_file_vars .env


if [ $# -eq 0 ]; then
    help
elif [ "$(type -t $1)" == 'function' ]; then
    func=$1
    shift
    $func "$@"
else
    docker-compose "$@"
fi