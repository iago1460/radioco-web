#!/bin/bash


function help() {
cat << EOF
Task runner

Usage:
    run [COMMAND] [ARGS...]

Commands:
    start               Setup and runs a production environment using docker
    start_dev           Setup and runs development environment using poetry
    build               Build the Docker image
    local_css           Extract compiled CSS from docker container
    translate           Generate and compile translations
    manage              Run Django management commands in a container

EOF
}

DOCKER_IMAGE="radioco-web:latest"


function build(){
     docker build -t $DOCKER_IMAGE .
}

function local_css(){
    # Build the sass container
    docker build --target sass-builder -t sass-builder:latest .
    # Run a container to extract the files
    docker create --name sass-container sass-builder:latest
    docker cp sass-container:/app/css/main.css ./backend/radioco/main/static/main/css/main.css
    docker rm sass-container
}

function start_dev(){
    # Step 1. Extract the css file
    local_css

    cd backend
    # Step 2. Install poetry dependencies
    poetry install

    # Step 3. Start the development server
    rm -rf static
    poetry run python manage.py collectstatic --no-input
    poetry run python manage.py compress
    poetry run python manage.py collectstatic --no-input

    # Step 4. Start the development server
    echo "Starting the development server"
    python manage.py runserver --nostatic
}

function start(){
     build
     docker run --rm -p 8000:8000 $DOCKER_IMAGE
}

function manage(){
    docker run --rm -v $(pwd)/backend:/app/backend $DOCKER_IMAGE python3 manage.py "$@"
}

function translate(){
    manage render_translation_vars
    manage makemessages -l en --no-wrap
    manage makemessages --all --no-wrap
    manage compilemessages
}


function export_file_vars() {
    # Exports values from .env files, but without clobbering existing variables
    filename=$1
    while read -r line; do
         if [[ $line =~ ^([^=#]+)=(.*)$ ]]; then
            key=${BASH_REMATCH[1]}
            value=${BASH_REMATCH[2]}
            existing_value=${!key}
            if [ -z $existing_value ]; then
                export $key="$value"
            fi
         fi
    done < $filename
}

export_file_vars .env


if [ $# -eq 0 ]; then
    help
elif [ "$(type -t $1)" == 'function' ]; then
    func=$1
    shift
    $func "$@"
else
    echo "Error: Unknown command '$1'" >&2
    help
    exit 1
fi